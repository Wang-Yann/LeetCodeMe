#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author        : Rock Wayne 
# @Created       : 2020-07-22 23:38:23
# @Last Modified : 2020-07-22 23:38:23
# @Mail          : lostlorder@gmail.com
# @Version       : 1.0.0

"""
# Êúâ‰∏ÄÈòü‰∫∫Ôºà‰∏§‰∫∫Êàñ‰ª•‰∏äÔºâÊÉ≥Ë¶ÅÂú®‰∏Ä‰∏™Âú∞ÊñπÁ¢∞Èù¢Ôºå‰ªñ‰ª¨Â∏åÊúõËÉΩÂ§üÊúÄÂ∞èÂåñ‰ªñ‰ª¨ÁöÑÊÄªË°åËµ∞Ë∑ùÁ¶ª„ÄÇ 
# 
#  Áªô‰Ω†‰∏Ä‰∏™ 2D ÁΩëÊ†ºÔºåÂÖ∂‰∏≠ÂêÑ‰∏™Ê†ºÂ≠êÂÜÖÁöÑÂÄºË¶Å‰πàÊòØ 0ÔºåË¶Å‰πàÊòØ 1„ÄÇ 
# 
#  1 Ë°®Á§∫Êüê‰∏™‰∫∫ÁöÑÂÆ∂ÊâÄÂ§ÑÁöÑ‰ΩçÁΩÆ„ÄÇËøôÈáåÔºåÊàë‰ª¨Â∞Ü‰ΩøÁî® ÊõºÂìàÈ°øË∑ùÁ¶ª Êù•ËÆ°ÁÆóÔºåÂÖ∂‰∏≠ distance(p1, p2) = |p2.x - p1.x| + |p2.y
#  - p1.y|„ÄÇ 
# 
#  Á§∫‰æãÔºö 
# 
#  ËæìÂÖ•: 
# 
# 1 - 0 - 0 - 0 - 1
# |   |   |   |   |
# 0 - 0 - 0 - 0 - 0
# |   |   |   |   |
# 0 - 0 - 1 - 0 - 0
# 
# ËæìÂá∫: 6 
# 
# Ëß£Êûê: ÁªôÂÆöÁöÑ‰∏â‰∏™‰∫∫ÂàÜÂà´‰ΩèÂú®(0,0)Ôºå(0,4) Âíå (2,2):
# ¬†    (0,2) ÊòØ‰∏Ä‰∏™ÊúÄ‰Ω≥ÁöÑÁ¢∞Èù¢ÁÇπÔºåÂÖ∂ÊÄªË°åËµ∞Ë∑ùÁ¶ª‰∏∫ 2 + 2 + 2 = 6ÔºåÊúÄÂ∞èÔºåÂõ†Ê≠§ËøîÂõû 6„ÄÇ 
#  Related Topics ÊéíÂ∫è Êï∞Â≠¶ 
#  üëç 28 üëé 0

"""

from typing import List

import pytest


# leetcode submit region begin(Prohibit modification and deletion)
class Solution:

    def minTotalDistance(self, grid: List[List[int]]) -> int:
        """
        ÊõºÂìàÈ°øË∑ùÁ¶ªÔºåË°åÂàóÁöÑÊúÄ‰Ω≥ÁÇπÂàÜÂºÄÊ±ÇÔºåÁªÑÂêàËµ∑Êù•Â∞±ÊòØÊúÄ‰Ω≥ÁÇπ„ÄÇ ‰∫åÁª¥->‰∏ÄÁª¥„ÄÇÊ±Ç‰∏≠‰ΩçÊï∞„ÄÇ

        """
        rows, cols = [], []
        m, n = len(grid), len(grid[0])
        for i in range(m):
            for j in range(n):
                if grid[i][j]:
                    rows.append(i)
                    cols.append(j)
        rows.sort()
        cols.sort()
        mid = len(rows) // 2
        v1, v2 = rows[mid], cols[mid]
        res = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j]:
                    res += abs(v1 - i) + abs(v2 - j)
        return res


# leetcode submit region end(Prohibit modification and deletion)


@pytest.mark.parametrize("kwargs,expected", [
    [dict(grid=[
        [1, 0, 0, 0, 1],
        [0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0],

    ]), 6],

])
def test_solutions(kwargs, expected):
    assert Solution().minTotalDistance(**kwargs) == expected


if __name__ == '__main__':
    pytest.main(["-q", "--color=yes", "--capture=tee-sys", __file__])

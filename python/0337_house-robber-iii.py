#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author        : Rock Wayne 
# @Created       : 2020-04-22 15:24:44
# @Last Modified : 2020-04-22 15:24:44
# @Mail          : rock@get.com.mm
# @Version       : alpha-1.0

# Âú®‰∏äÊ¨°ÊâìÂä´ÂÆå‰∏ÄÊù°Ë°óÈÅì‰πãÂêéÂíå‰∏ÄÂúàÊàøÂ±ãÂêéÔºåÂ∞èÂÅ∑ÂèàÂèëÁé∞‰∫Ü‰∏Ä‰∏™Êñ∞ÁöÑÂèØË°åÁ™ÉÁöÑÂú∞Âå∫„ÄÇËøô‰∏™Âú∞Âå∫Âè™Êúâ‰∏Ä‰∏™ÂÖ•Âè£ÔºåÊàë‰ª¨Áß∞‰πã‰∏∫‚ÄúÊ†π‚Äù„ÄÇ Èô§‰∫Ü‚ÄúÊ†π‚Äù‰πãÂ§ñÔºåÊØèÊ†ãÊàøÂ≠êÊúâ‰∏îÂè™Êúâ‰∏Ä‰∏™‚ÄúÁà∂‚Äú
# ÊàøÂ≠ê‰∏é‰πãÁõ∏Ëøû„ÄÇ‰∏ÄÁï™‰æ¶ÂØü‰πãÂêéÔºåËÅ™ÊòéÁöÑÂ∞èÂÅ∑ÊÑèËØÜÂà∞‚ÄúËøô‰∏™Âú∞ÊñπÁöÑÊâÄÊúâÊàøÂ±ãÁöÑÊéíÂàóÁ±ª‰ºº‰∫é‰∏ÄÊ£µ‰∫åÂèâÊ†ë‚Äù„ÄÇ Â¶ÇÊûú‰∏§‰∏™Áõ¥Êé•Áõ∏ËøûÁöÑÊàøÂ≠êÂú®Âêå‰∏ÄÂ§©Êôö‰∏äË¢´ÊâìÂä´ÔºåÊàøÂ±ãÂ∞ÜËá™Âä®Êä•Ë≠¶„ÄÇ
#
#  ËÆ°ÁÆóÂú®‰∏çËß¶Âä®Ë≠¶Êä•ÁöÑÊÉÖÂÜµ‰∏ãÔºåÂ∞èÂÅ∑‰∏ÄÊôöËÉΩÂ§üÁõóÂèñÁöÑÊúÄÈ´òÈáëÈ¢ù„ÄÇ
#
#  Á§∫‰æã 1:
#
#  ËæìÂÖ•: [3,2,3,null,3,null,1]
#
#      3
#     / \
#    2   3
#     \   \
#      3   1
#
# ËæìÂá∫: 7
# Ëß£Èáä:¬†Â∞èÂÅ∑‰∏ÄÊôöËÉΩÂ§üÁõóÂèñÁöÑÊúÄÈ´òÈáëÈ¢ù = 3 + 3 + 1 = 7.
#
#  Á§∫‰æã 2:
#
#  ËæìÂÖ•: [3,4,5,1,3,null,1]
#
# ¬†    3
#     / \
#    4   5
#   / \   \
#  1   3   1
#
# ËæìÂá∫: 9
# Ëß£Èáä:¬†Â∞èÂÅ∑‰∏ÄÊôöËÉΩÂ§üÁõóÂèñÁöÑÊúÄÈ´òÈáëÈ¢ù¬†= 4 + 5 = 9.
#
#  Related Topics Ê†ë Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢
#  üëç 422 üëé 0

import functools

import pytest

from common_utils import TreeNode


class Solution:
    def rob(self, root: TreeNode) -> int:
        """
        TODO Good
        """

        @functools.lru_cache(None)
        def getRobRecu(node):
            """
            return vals tuple ( with node,val without node)
            """
            if not node:
                return 0, 0
            left, right = getRobRecu(node.left), getRobRecu(node.right)
            return node.val + left[1] + right[1], max(left) + max(right)

        return max(getRobRecu(root))


class Solution0:
    @functools.lru_cache(None)
    def rob(self, root: TreeNode) -> int:
        """ÂàùÂßãÁâàÊú¨"""
        if not root:
            return 0
        money_with_node = root.val
        if root.left:
            money_with_node += self.rob(root.left.left) + self.rob(root.left.right)
        if root.right:
            money_with_node += self.rob(root.right.left) + self.rob(root.right.right)
        money_without_node = self.rob(root.left) + self.rob(root.right)
        return max(money_with_node, money_without_node)


@pytest.mark.parametrize("kw,expected", [
    [dict(
        root=TreeNode(
            3,
            left=TreeNode(2, right=TreeNode(3)),
            right=TreeNode(3, right=TreeNode(1))
        ),
    ), 7],
    [dict(
        root=TreeNode(
            3,
            left=TreeNode(4, left=TreeNode(1), right=TreeNode(3)),
            right=TreeNode(5, right=TreeNode(1))
        ),
    ), 9],
])
def test_solutions(kw, expected):
    assert Solution().rob(**kw) == expected
    assert Solution0().rob(**kw) == expected


if __name__ == '__main__':
    pytest.main(["-q", "--color=yes", "--capture=no", __file__])

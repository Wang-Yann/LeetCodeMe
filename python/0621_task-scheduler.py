#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author        : Rock Wayne 
# @Created       : 2020-04-27 17:25:31
# @Last Modified : 2020-04-27 17:25:31
# @Mail          : rock@get.com.mm
# @Version       : alpha-1.0

# ÁªôÂÆö‰∏Ä‰∏™Áî®Â≠óÁ¨¶Êï∞ÁªÑË°®Á§∫ÁöÑ CPU ÈúÄË¶ÅÊâßË°åÁöÑ‰ªªÂä°ÂàóË°®„ÄÇÂÖ∂‰∏≠ÂåÖÂê´‰ΩøÁî®Â§ßÂÜôÁöÑ A - Z Â≠óÊØçË°®Á§∫ÁöÑ26 Áßç‰∏çÂêåÁßçÁ±ªÁöÑ‰ªªÂä°„ÄÇ‰ªªÂä°ÂèØ‰ª•‰ª•‰ªªÊÑèÈ°∫Â∫èÊâßË°åÔºåÂπ∂‰∏îÊØè‰∏™‰ªªÂä°
# ÈÉΩÂèØ‰ª•Âú® 1 ‰∏™Âçï‰ΩçÊó∂Èó¥ÂÜÖÊâßË°åÂÆå„ÄÇCPU Âú®‰ªª‰Ωï‰∏Ä‰∏™Âçï‰ΩçÊó∂Èó¥ÂÜÖÈÉΩÂèØ‰ª•ÊâßË°å‰∏Ä‰∏™‰ªªÂä°ÔºåÊàñËÄÖÂú®ÂæÖÂëΩÁä∂ÊÄÅ„ÄÇ
#
#  ÁÑ∂ËÄåÔºå‰∏§‰∏™Áõ∏ÂêåÁßçÁ±ªÁöÑ‰ªªÂä°‰πãÈó¥ÂøÖÈ°ªÊúâÈïøÂ∫¶‰∏∫ n ÁöÑÂÜ∑Âç¥Êó∂Èó¥ÔºåÂõ†Ê≠§Ëá≥Â∞ëÊúâËøûÁª≠ n ‰∏™Âçï‰ΩçÊó∂Èó¥ÂÜÖ CPU Âú®ÊâßË°å‰∏çÂêåÁöÑ‰ªªÂä°ÔºåÊàñËÄÖÂú®ÂæÖÂëΩÁä∂ÊÄÅ„ÄÇ
#
#  ‰Ω†ÈúÄË¶ÅËÆ°ÁÆóÂÆåÊàêÊâÄÊúâ‰ªªÂä°ÊâÄÈúÄË¶ÅÁöÑÊúÄÁü≠Êó∂Èó¥„ÄÇ
#
#
#
#  Á§∫‰æã Ôºö
#
#  ËæìÂÖ•Ôºötasks = ["A","A","A","B","B","B"], n = 2
# ËæìÂá∫Ôºö8
# Ëß£ÈáäÔºöA -> B -> (ÂæÖÂëΩ) -> A -> B -> (ÂæÖÂëΩ) -> A -> B.
#      Âú®Êú¨Á§∫‰æã‰∏≠Ôºå‰∏§‰∏™Áõ∏ÂêåÁ±ªÂûã‰ªªÂä°‰πãÈó¥ÂøÖÈ°ªÈó¥ÈöîÈïøÂ∫¶‰∏∫ n = 2 ÁöÑÂÜ∑Âç¥Êó∂Èó¥ÔºåËÄåÊâßË°å‰∏Ä‰∏™‰ªªÂä°Âè™ÈúÄË¶Å‰∏Ä‰∏™Âçï‰ΩçÊó∂Èó¥ÔºåÊâÄ‰ª•‰∏≠Èó¥Âá∫Áé∞‰∫ÜÔºàÂæÖÂëΩÔºâÁä∂ÊÄÅ„ÄÇ
#
#
#
#  ÊèêÁ§∫Ôºö
#
#
#  ‰ªªÂä°ÁöÑÊÄª‰∏™Êï∞‰∏∫ [1, 10000]„ÄÇ
#  n ÁöÑÂèñÂÄºËåÉÂõ¥‰∏∫ [0, 100]„ÄÇ
#
#  Related Topics Ë¥™ÂøÉÁÆóÊ≥ï ÈòüÂàó Êï∞ÁªÑ
#  üëç 316 üëé 0

import collections
from queue import PriorityQueue
from typing import List

import pytest


class Solution0:
    def leastInterval(self, tasks: List[str], n: int) -> int:
        """
        ÂÆåÊàêÊâÄÊúâ‰ªªÂä°ÁöÑÊúÄÁü≠Êó∂Èó¥ÂèñÂÜ≥‰∫éÂá∫Áé∞Ê¨°Êï∞ÊúÄÂ§öÁöÑ‰ªªÂä°Êï∞Èáè„ÄÇ
        https://leetcode-cn.com/problems/task-scheduler/solution/python-xiang-jie-by-jalan/
        Ê≠•È™§:
            ËÆ°ÁÆóÊØè‰∏™‰ªªÂä°Âá∫Áé∞ÁöÑÊ¨°Êï∞
            ÊâæÂá∫Âá∫Áé∞Ê¨°Êï∞ÊúÄÂ§öÁöÑ‰ªªÂä°ÔºåÂÅáËÆæÂá∫Áé∞Ê¨°Êï∞‰∏∫ x
            ËÆ°ÁÆóËá≥Â∞ëÈúÄË¶ÅÁöÑÊó∂Èó¥ (x - 1) * (n + 1)ÔºåËÆ∞‰∏∫ min_time
            ËÆ°ÁÆóÂá∫Áé∞Ê¨°Êï∞‰∏∫ x ÁöÑ‰ªªÂä°ÊÄªÊï∞ countÔºåËÆ°ÁÆóÊúÄÁªàÁªìÊûú‰∏∫ min_time + count


        """
        counter = collections.Counter(tasks)
        _, max_count = counter.most_common(1)[0]
        # Ëøô‰∏™Êó∂Èó¥ÊòØÈô§ÂéªÊâßË°åÊúÄÂêé‰∏ÄÊ¨°Ë∞ÉÂ∫¶ÁöÑÊâÄÈúÄÊúÄÂ∞ëÊó∂Èó¥
        result = (max_count - 1) * (n + 1)
        # print(counter, max_count, result)
        for count in counter.values():
            if count == max_count:
                result += 1
        # Â¶ÇÊûúÁªìÊûúÊØî‰ªªÂä°Êï∞ÈáèÂ∞ëÔºåÂàôËøîÂõûÊÄª‰ªªÂä°Êï∞
        return max(result, len(tasks))


class Solution:
    def leastInterval(self, tasks: List[str], n: int) -> int:
        # from queue import PriorityQueue
        counter = collections.Counter(tasks)
        q = PriorityQueue()
        # ‰ºòÂÖà„ÄÄÂ∞èÂÄº
        for k, v in counter.items():
            q.put((-v, v))
        time = 0
        while not q.empty():
            i = 0
            tmp = []
            while i <= n:
                if not q.empty():
                    _, cnt = q.get()
                    if cnt > 1:
                        tmp.append(cnt - 1)
                time += 1
                if q.empty() and not tmp:
                    break
                i += 1
            for v in tmp:
                q.put((-v, v))
        return time


@pytest.mark.parametrize("kw,expected", [
    [dict(tasks=["A", "A", "A", "B", "B", "B"], n=2), 8],
    [dict(tasks=["A", "A", "A", "B", "B", "B", "C", "C", "D", "D", "E", "E", "F", "F"], n=2), 14],
])
def test_solutions(kw, expected):
    assert Solution().leastInterval(**kw) == expected
    assert Solution0().leastInterval(**kw) == expected


if __name__ == '__main__':
    pytest.main(["-q", "--color=yes", "--capture=no", __file__])

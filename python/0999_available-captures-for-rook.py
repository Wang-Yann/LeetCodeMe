#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author        : Rock Wayne 
# @Created       : 2020-05-31 08:00:00
# @Last Modified : 2020-05-31 08:00:00
# @Mail          : lostlorder@gmail.com
# @Version       : alpha-1.0
"""
# 在一个 8 x 8 的棋盘上，有一个白色的车（Rook），用字符 'R' 表示。棋盘上还可能存在空方块，白色的象（Bishop）以及黑色的卒（pawn），分
# 别用字符 '.'，'B' 和 'p' 表示。不难看出，大写字符表示的是白棋，小写字符表示的是黑棋。 
# 
#  车按国际象棋中的规则移动。东，西，南，北四个基本方向任选其一，然后一直向选定的方向移动，直到满足下列四个条件之一： 
# 
#  
#  棋手选择主动停下来。 
#  棋子因到达棋盘的边缘而停下。 
#  棋子移动到某一方格来捕获位于该方格上敌方（黑色）的卒，停在该方格内。 
#  车不能进入/越过已经放有其他友方棋子（白色的象）的方格，停在友方棋子前。 
#  
# 
#  你现在可以控制车移动一次，请你统计有多少敌方的卒处于你的捕获范围内（即，可以被一步捕获的棋子数）。 
# 
#  
# 
#  示例 1： 
# 
#  
# 
#  输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",
# ".",".","R",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",
# ".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".",
# "."],[".",".",".",".",".",".",".","."]]
# 输出：3
# 解释：
# 在本例中，车能够捕获所有的卒。
#  
# 
#  示例 2： 
# 
#  
# 
#  输入：[[".",".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".",
# "p","p","B","p","p",".","."],[".","p","B","R","B","p",".","."],[".","p","p","B",
# "p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".",
# "."],[".",".",".",".",".",".",".","."]]
# 输出：0
# 解释：
# 象阻止了车捕获任何卒。
#  
# 
#  示例 3： 
# 
#  
# 
#  输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",
# ".",".","p",".",".",".","."],["p","p",".","R",".","p","B","."],[".",".",".",".",
# ".",".",".","."],[".",".",".","B",".",".",".","."],[".",".",".","p",".",".",".",
# "."],[".",".",".",".",".",".",".","."]]
# 输出：3
# 解释： 
# 车可以捕获位置 b5，d6 和 f5 的卒。
#  
# 
#  
# 
#  提示： 
# 
#  
#  board.length == board[i].length == 8 
#  board[i][j] 可以是 'R'，'.'，'B' 或 'p' 
#  只有一个格子上存在 board[i][j] == 'R' 
#  
#  Related Topics 数组

"""

from typing import List

import pytest


# leetcode submit region begin(Prohibit modification and deletion)
class Solution:

    def numRookCaptures(self, board: List[List[str]]) -> int:
        def getR():
            for i in range(R):
                for j in range(C):
                    if board[i][j] == "R":
                        return i, j

        def get_captures(lst):
            res = 0
            for v in lst:
                if v == "B":
                    break
                elif v == "p":
                    res += 1
                    break
            return res

        R = C = 8
        rx, ry = getR()
        l = get_captures([board[rx][i] for i in range(ry - 1, -1, -1)])
        r = get_captures([board[rx][i] for i in range(ry + 1, C)])
        t = get_captures([board[i][ry] for i in range(rx - 1, -1, -1)])
        b = get_captures([board[i][ry] for i in range(rx + 1, R)])
        # print(l,r,t,b)
        return l + r + t + b


# leetcode submit region end(Prohibit modification and deletion)

@pytest.mark.parametrize("args,expected", [
    (
            [[".", ".", ".", ".", ".", ".", ".", "."],
             [".", ".", ".", "p", ".", ".", ".", "."],
             [".", ".", ".", "R", ".", ".", ".", "p"],
             [".", ".", ".", ".", ".", ".", ".", "."],
             [".", ".", ".", ".", ".", ".", ".", "."],
             [".", ".", ".", "p", ".", ".", ".", "."],
             [".", ".", ".", ".", ".", ".", ".", "."],
             [".", ".", ".", ".", ".", ".", ".", "."]]
            , 3),
    (
            [[".", ".", ".", ".", ".", ".", ".", "."],
             [".", "p", "p", "p", "p", "p", ".", "."],
             [".", "p", "p", "B", "p", "p", ".", "."],
             [".", "p", "B", "R", "B", "p", ".", "."],
             [".", "p", "p", "B", "p", "p", ".", "."],
             [".", "p", "p", "p", "p", "p", ".", "."],
             [".", ".", ".", ".", ".", ".", ".", "."],
             [".", ".", ".", ".", ".", ".", ".", "."]]
            , 0),
    (
            [[".", ".", ".", ".", ".", ".", ".", "."],
             [".", ".", ".", "p", ".", ".", ".", "."],
             [".", ".", ".", "p", ".", ".", ".", "."],
             ["p", "p", ".", "R", ".", "p", "B", "."],
             [".", ".", ".", ".", ".", ".", ".", "."],
             [".", ".", ".", "B", ".", ".", ".", "."],
             [".", ".", ".", "p", ".", ".", ".", "."],
             [".", ".", ".", ".", ".", ".", ".", "."]]
            , 3),
])
def test_solutions(args, expected):
    assert Solution().numRookCaptures(args) == expected


if __name__ == '__main__':
    pytest.main(["-q", "--color=yes", "--capture=no", __file__])

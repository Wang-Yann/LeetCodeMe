#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author        : Rock Wayne 
# @Created       : 2020-07-31 17:29:49
# @Last Modified : 2020-07-31 17:29:49
# @Mail          : lostlorder@gmail.com
# @Version       : alpha-1.0

"""
# ÂØπ‰∫é‰ªª‰ΩïÂ≠óÁ¨¶‰∏≤ÔºåÊàë‰ª¨ÂèØ‰ª•ÈÄöËøáÂà†Èô§ÂÖ∂‰∏≠‰∏Ä‰∫õÂ≠óÁ¨¶Ôºà‰πüÂèØËÉΩ‰∏çÂà†Èô§ÔºâÊù•ÊûÑÈÄ†ËØ•Â≠óÁ¨¶‰∏≤ÁöÑÂ≠êÂ∫èÂàó„ÄÇ 
# 
#  ÁªôÂÆöÊ∫êÂ≠óÁ¨¶‰∏≤ source ÂíåÁõÆÊ†áÂ≠óÁ¨¶‰∏≤ targetÔºåÊâæÂá∫Ê∫êÂ≠óÁ¨¶‰∏≤‰∏≠ËÉΩÈÄöËøá‰∏≤ËÅîÂΩ¢ÊàêÁõÆÊ†áÂ≠óÁ¨¶‰∏≤ÁöÑÂ≠êÂ∫èÂàóÁöÑÊúÄÂ∞èÊï∞Èáè„ÄÇÂ¶ÇÊûúÊó†Ê≥ïÈÄöËøá‰∏≤ËÅîÊ∫êÂ≠óÁ¨¶‰∏≤‰∏≠ÁöÑÂ≠êÂ∫èÂàóÊù•ÊûÑÈÄ†
# ÁõÆÊ†áÂ≠óÁ¨¶‰∏≤ÔºåÂàôËøîÂõû -1„ÄÇ 
# 
#  
# 
#  Á§∫‰æã 1Ôºö 
# 
#  ËæìÂÖ•Ôºösource = "abc", target = "abcbc"
# ËæìÂá∫Ôºö2
# Ëß£ÈáäÔºöÁõÆÊ†áÂ≠óÁ¨¶‰∏≤ "abcbc" ÂèØ‰ª•Áî± "abc" Âíå "bc" ÂΩ¢ÊàêÔºåÂÆÉ‰ª¨ÈÉΩÊòØÊ∫êÂ≠óÁ¨¶‰∏≤ "abc" ÁöÑÂ≠êÂ∫èÂàó„ÄÇ
#  
# 
#  Á§∫‰æã 2Ôºö 
# 
#  ËæìÂÖ•Ôºösource = "abc", target = "acdbc"
# ËæìÂá∫Ôºö-1
# Ëß£ÈáäÔºöÁî±‰∫éÁõÆÊ†áÂ≠óÁ¨¶‰∏≤‰∏≠ÂåÖÂê´Â≠óÁ¨¶ "d"ÔºåÊâÄ‰ª•Êó†Ê≥ïÁî±Ê∫êÂ≠óÁ¨¶‰∏≤ÁöÑÂ≠êÂ∫èÂàóÊûÑÂª∫ÁõÆÊ†áÂ≠óÁ¨¶‰∏≤„ÄÇ
#  
# 
#  Á§∫‰æã 3Ôºö 
# 
#  ËæìÂÖ•Ôºösource = "xyz", target = "xzyxz"
# ËæìÂá∫Ôºö3
# Ëß£ÈáäÔºöÁõÆÊ†áÂ≠óÁ¨¶‰∏≤ÂèØ‰ª•ÊåâÂ¶Ç‰∏ãÊñπÂºèÊûÑÂª∫Ôºö "xz" + "y" + "xz"„ÄÇ
#  
# 
#  
# 
#  ÊèêÁ§∫Ôºö 
# 
#  
#  source Âíå target ‰∏§‰∏™Â≠óÁ¨¶‰∏≤ÈÉΩÂè™ÂåÖÂê´ "a"-"z" ÁöÑËã±ÊñáÂ∞èÂÜôÂ≠óÊØç„ÄÇ 
#  source Âíå target ‰∏§‰∏™Â≠óÁ¨¶‰∏≤ÁöÑÈïøÂ∫¶‰ªã‰∫é 1 Âíå 1000 ‰πãÈó¥„ÄÇ 
#  
#  Related Topics Ë¥™ÂøÉÁÆóÊ≥ï Âä®ÊÄÅËßÑÂàí 
#  üëç 23 üëé 0

"""

import pytest


# leetcode submit region begin(Prohibit modification and deletion)
class Solution:
    def shortestWay(self, source: str, target: str) -> int:
        """‰ª£Á†ÅÊ∏ÖÊô∞"""
        count = 0
        s = 0
        t = 0
        while t < len(target):
            if target[t] not in source:
                return -1
            if source[s] == target[t]:
                s += 1
                t += 1
            else:
                s += 1
            if s >= len(source):
                count += 1
                s = 0
        if t >= len(target) and s != 0:
            count += 1
        return count


# leetcode submit region end(Prohibit modification and deletion)
class Solution1:
    def shortestWay(self, source: str, target: str) -> int:
        """GOOD"""
        N = len(target)
        s = source * N
        r, cur = len(s) - 1, N - 1
        while cur >= 0 and r >= 0:
            if s[r] == target[cur]:
                cur -= 1
            r -= 1
        # print("cur,r",cur,r)
        if cur >= 0:
            return -1
        return N - (r + 1) // len(source)


@pytest.mark.parametrize("kw,expected", [
    [dict(source="abc", target="abcbc"), 2],
    [dict(source="abc", target="acdbc"), -1],
    [dict(source="xyz", target="xzyxz"), 3],
])
def test_solutions(kw, expected):
    assert Solution().shortestWay(**kw) == expected
    assert Solution1().shortestWay(**kw) == expected


if __name__ == '__main__':
    pytest.main(["-q", "--color=yes", "--capture=no", __file__])

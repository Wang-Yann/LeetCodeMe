#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author        : Rock Wayne 
# @Created       : 2021-02-25 08:35:54
# @Last Modified : 2021-02-25 08:35:54
# @Mail          : lostlorder@gmail.com
# @Version       : 1.0


# Êúâ‰∏ÄÂè™Ë∑≥Ëö§ÁöÑÂÆ∂Âú®Êï∞ËΩ¥‰∏äÁöÑ‰ΩçÁΩÆ x Â§Ñ„ÄÇËØ∑‰Ω†Â∏ÆÂä©ÂÆÉ‰ªé‰ΩçÁΩÆ 0 Âá∫ÂèëÔºåÂà∞ËææÂÆÉÁöÑÂÆ∂„ÄÇ 
# 
#  Ë∑≥Ëö§Ë∑≥Ë∑ÉÁöÑËßÑÂàôÂ¶Ç‰∏ãÔºö 
# 
#  
#  ÂÆÉÂèØ‰ª• ÂæÄÂâç Ë∑≥ÊÅ∞Â•Ω a ‰∏™‰ΩçÁΩÆÔºàÂç≥ÂæÄÂè≥Ë∑≥Ôºâ„ÄÇ 
#  ÂÆÉÂèØ‰ª• ÂæÄÂêé Ë∑≥ÊÅ∞Â•Ω b ‰∏™‰ΩçÁΩÆÔºàÂç≥ÂæÄÂ∑¶Ë∑≥Ôºâ„ÄÇ 
#  ÂÆÉ‰∏çËÉΩ ËøûÁª≠ ÂæÄÂêéË∑≥ 2 Ê¨°„ÄÇ 
#  ÂÆÉ‰∏çËÉΩË∑≥Âà∞‰ªª‰Ωï forbidden Êï∞ÁªÑ‰∏≠ÁöÑ‰ΩçÁΩÆ„ÄÇ 
#  
# 
#  Ë∑≥Ëö§ÂèØ‰ª•ÂæÄÂâçË∑≥ Ë∂ÖËøá ÂÆÉÁöÑÂÆ∂ÁöÑ‰ΩçÁΩÆÔºå‰ΩÜÊòØÂÆÉ ‰∏çËÉΩË∑≥Âà∞Ë¥üÊï¥Êï∞ ÁöÑ‰ΩçÁΩÆ„ÄÇ 
# 
#  Áªô‰Ω†‰∏Ä‰∏™Êï¥Êï∞Êï∞ÁªÑ forbidden ÔºåÂÖ∂‰∏≠ forbidden[i] ÊòØË∑≥Ëö§‰∏çËÉΩË∑≥Âà∞ÁöÑ‰ΩçÁΩÆÔºåÂêåÊó∂Áªô‰Ω†Êï¥Êï∞ aÔºå b Âíå x ÔºåËØ∑‰Ω†ËøîÂõûË∑≥Ëö§Âà∞ÂÆ∂ÁöÑÊúÄÂ∞ëË∑≥Ë∑É
# Ê¨°Êï∞„ÄÇÂ¶ÇÊûúÊ≤°ÊúâÊÅ∞Â•ΩÂà∞Ëææ x ÁöÑÂèØË°åÊñπÊ°àÔºåËØ∑‰Ω†ËøîÂõû -1 „ÄÇ 
# 
#  
# 
#  Á§∫‰æã 1Ôºö 
# 
#  
# ËæìÂÖ•Ôºöforbidden = [14,4,18,1,15], a = 3, b = 15, x = 9
# ËæìÂá∫Ôºö3
# Ëß£ÈáäÔºöÂæÄÂâçË∑≥ 3 Ê¨°Ôºà0 -> 3 -> 6 -> 9ÔºâÔºåË∑≥Ëö§Â∞±Âà∞ÂÆ∂‰∫Ü„ÄÇ
#  
# 
#  Á§∫‰æã 2Ôºö 
# 
#  
# ËæìÂÖ•Ôºöforbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11
# ËæìÂá∫Ôºö-1
#  
# 
#  Á§∫‰æã 3Ôºö 
# 
#  
# ËæìÂÖ•Ôºöforbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7
# ËæìÂá∫Ôºö2
# Ëß£ÈáäÔºöÂæÄÂâçË∑≥‰∏ÄÊ¨°Ôºà0 -> 16ÔºâÔºåÁÑ∂ÂêéÂæÄÂõûË∑≥‰∏ÄÊ¨°Ôºà16 -> 7ÔºâÔºåË∑≥Ëö§Â∞±Âà∞ÂÆ∂‰∫Ü„ÄÇ
#  
# 
#  
# 
#  ÊèêÁ§∫Ôºö 
# 
#  
#  1 <= forbidden.length <= 1000 
#  1 <= a, b, forbidden[i] <= 2000 
#  0 <= x <= 2000 
#  forbidden ‰∏≠ÊâÄÊúâ‰ΩçÁΩÆ‰∫í‰∏çÁõ∏Âêå„ÄÇ 
#  ‰ΩçÁΩÆ x ‰∏çÂú® forbidden ‰∏≠„ÄÇ 
#  
#  Related Topics ÂπøÂ∫¶‰ºòÂÖàÊêúÁ¥¢ Âä®ÊÄÅËßÑÂàí 
#  üëç 16 üëé 0


import collections
from typing import List

import pytest


# leetcode submit region begin(Prohibit modification and deletion)
class Solution:
    def minimumJumps(self, forbidden: List[int], a: int, b: int, x: int) -> int:
        forbidden = set(forbidden)
        dq = collections.deque()
        dq.append((0, 0, False))
        while dq:
            cur, steps, used = dq.popleft()
            if cur == x:
                return steps
            if cur + a < 6000 and cur + a not in forbidden:
                # 6000ÊòØÂæÄÂè≥Êé¢Á¥¢ÁöÑÊúÄÂ§ßÂÄºÔºåxÊúÄÂ§ß‰∏∫2000
                forbidden.add(cur + a)
                dq.append((cur + a, steps + 1, False))
            if not used and cur - b > 0 and cur - b not in forbidden:
                # forbidden.add(cur-b)
                # ËøôÈáå‰∏çËÉΩforbiddenÔºåÂõ†‰∏∫ÂêéÈÄÄÂõûcur-bÂ§ÑÊó∂ÔºåÊó†Ê≥ïË¶ÜÁõñÂâçËøõÂà∞cur-bÂÜçÂêéÈÄÄÂà∞cur-2bÁöÑÊÉÖÂÜµ„ÄÇ
                dq.append((cur - b, steps + 1, True))
        return -1


# leetcode submit region end(Prohibit modification and deletion)

class Solution1:
    def minimumJumps(self, forbidden: List[int], a: int, b: int, x: int) -> int:
        """
        Me
        """
        forbidden_set = set(forbidden)
        dq = collections.deque([(0, 1)])
        dest = x
        step = 0
        LIMIT = 2000 + a + b
        while dq:
            for _ in range(len(dq)):
                pos, d = dq.popleft()
                if pos == dest:
                    return step
                if pos + a not in forbidden_set and pos + a < LIMIT:
                    dq.append((pos + a, 1))
                    forbidden_set.add(pos + a)
                if d != -1 and pos - b > 0 and pos - b not in forbidden_set:
                    dq.append((pos - b, -1))
            step += 1
        return -1


@pytest.mark.parametrize("kw,expected", [
    [dict(forbidden=[14, 4, 18, 1, 15], a=3, b=15, x=9), 3],
    [dict(forbidden=[8, 3, 16, 6, 12, 20], a=15, b=13, x=11), -1],
    [dict(forbidden=[1, 6, 2, 14, 5, 17, 4], a=16, b=9, x=7), 2],
    [dict(forbidden=[18, 13, 3, 9, 8, 14], a=3, b=8, x=6), -1],
    [dict(forbidden=[162, 118, 178, 152, 167, 100, 40, 74, 199, 186, 26, 73, 200, 127, 30, 124, 193, 84, 184, 36,
                     103, 149, 153, 9, 54, 154, 133, 95, 45, 198, 79, 157, 64, 122, 59, 71, 48, 177, 82, 35, 14, 176,
                     16, 108, 111, 6, 168, 31, 134, 164, 136, 72, 98], a=29, b=98, x=80), 121],
])
@pytest.mark.parametrize("SolutionCLS", [Solution, Solution1])
def test_solutions(kw, expected, SolutionCLS):
    assert SolutionCLS().minimumJumps(**kw) == expected


if __name__ == '__main__':
    pytest.main(["-q", "--color=yes", "--capture=no", __file__])

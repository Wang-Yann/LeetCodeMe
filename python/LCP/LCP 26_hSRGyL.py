#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author        : Rock Wayne 
# @Created       : 2021-02-22 22:58:23
# @Last Modified : 2021-02-22 22:58:23
# @Mail          : lostlorder@gmail.com
# @Version       : alpha-1.0

"""
# Â∞èÊâ£ÂèÇÂä†ÁöÑÁßãÊó•Â∏ÇÈõÜÊôØÂå∫ÂÖ±Êúâ $N$ ‰∏™ÊôØÁÇπÔºåÊôØÁÇπÁºñÂè∑‰∏∫ $1$~$N$„ÄÇÊôØÁÇπÂÜÖËÆæÊúâ $N-1$ Êù°ÂèåÂêëÈÅìË∑ØÔºå‰ΩøÊâÄÊúâÊôØÁÇπÂΩ¢Êàê‰∫Ü‰∏Ä‰∏™‰∫åÂèâÊ†ëÁªìÊûÑÔºåÊ†πÁªìÁÇπËÆ∞‰∏∫ `r
# oot`ÔºåÊôØÁÇπÁºñÂè∑Âç≥‰∏∫ËäÇÁÇπÂÄº„ÄÇ
# 
# Áî±‰∫éÁßãÊó•Â∏ÇÈõÜÊôØÂå∫ÁöÑÁªìÊûÑÁâπÊÆäÔºåÊ∏∏ÂÆ¢ÂæàÂÆπÊòìËø∑Ë∑ØÔºå‰∏ªÂäûÊñπÂÜ≥ÂÆöÂú®ÊôØÂå∫ÁöÑËã•Âπ≤‰∏™ÊôØÁÇπËÆæÁΩÆÂØºËà™Ë£ÖÁΩÆÔºåÊåâÁÖßÊâÄÂú®ÊôØÁÇπÁºñÂè∑ÂçáÂ∫èÊéíÂàóÂêéÂÆö‰πâË£ÖÁΩÆÁºñÂè∑‰∏∫ 1 ~ M„ÄÇÂØºËà™Ë£ÖÁΩÆÂêëÊ∏∏ÂÆ¢Âèë
# ÈÄÅÊï∞ÊçÆÔºåÊï∞ÊçÆÂÜÖÂÆπ‰∏∫ÂàóË°® `[Ê∏∏ÂÆ¢‰∏éË£ÖÁΩÆ 1 ÁöÑÁõ∏ÂØπË∑ùÁ¶ª,Ê∏∏ÂÆ¢‰∏éË£ÖÁΩÆ 2 ÁöÑÁõ∏ÂØπË∑ùÁ¶ª,...,Ê∏∏ÂÆ¢‰∏éË£ÖÁΩÆ M ÁöÑÁõ∏ÂØπË∑ùÁ¶ª]`„ÄÇÁî±‰∫éÊ∏∏ÂÆ¢Ê†πÊçÆÂØºËà™Ë£ÖÁΩÆÂèëÈÄÅÁöÑ‰ø°ÊÅØÊù•Á°ÆËÆ§
# ‰ΩçÁΩÆÔºåÂõ†Ê≠§‰∏ªÂäûÊñπÈúÄ‰øùËØÅÊ∏∏ÂÆ¢Âú®ÊØè‰∏™ÊôØÁÇπÊé•Êî∂ÁöÑÊï∞ÊçÆ‰ø°ÊÅØÁöÜ‰∏çÁõ∏Âêå„ÄÇËØ∑ËøîÂõû‰∏ªÂäûÊñπÊúÄÂ∞ëÈúÄË¶ÅËÆæÁΩÆÂ§öÂ∞ë‰∏™ÂØºËà™Ë£ÖÁΩÆ„ÄÇ
# 
# **Á§∫‰æã 1Ôºö**
# >ËæìÂÖ•Ôºö`root = [1,2,null,3,4]`
# >
# >ËæìÂá∫Ôºö`2`
# >
# >Ëß£ÈáäÔºöÂú®ÊôØÁÇπ 1„ÄÅ3 ÊàñÊôØÁÇπ 1„ÄÅ4 ÊàñÊôØÁÇπ 3„ÄÅ4 ËÆæÁΩÆÂØºËà™Ë£ÖÁΩÆ„ÄÇ
# >
# >![image.png](https://pic.leetcode-cn.com/1597996812-tqrgwu-image.png){:height
# ="250px"}
# 
# 
# 
# **Á§∫‰æã 2Ôºö**
# >ËæìÂÖ•Ôºö`root = [1,2,3,4]`
# >
# >ËæìÂá∫Ôºö`1`
# >
# >Ëß£ÈáäÔºöÂú®ÊôØÁÇπ 3„ÄÅ4 ËÆæÁΩÆÂØºËà™Ë£ÖÁΩÆÁöÜÂèØ„ÄÇ
# >
# >![image.png](https://pic.leetcode-cn.com/1597996826-EUQRyz-image.png){:height
# ="200px"}
# 
# 
# 
# **ÊèêÁ§∫Ôºö**
# - `2 <= N <= 50000`
# - ‰∫åÂèâÊ†ëÁöÑÈùûÁ©∫ËäÇÁÇπÂÄº‰∏∫ `1~N` ÁöÑ‰∏Ä‰∏™ÊéíÂàó„ÄÇ
#  üëç 6 üëé 0
  

"""
import functools

import pytest

from common_utils import TreeNode


# leetcode submit region begin(Prohibit modification and deletion)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution:

    def navigation(self, root: TreeNode) -> int:
        """
        https://leetcode-cn.com/problems/hSRGyL/solution/python-shen-qi-de-ji-yi-hua-sou-suo-by-zerotrac2/
        dp(node, inside, outside) Ë°®Á§∫ÂØπ‰∫é‰ª• node ‰∏∫Ê†πËäÇÁÇπÁöÑÂ≠êÊ†ë
        Â≠êÊ†ëÂÜÖÈÉ®ÁöÑÊëÑÂÉèÂ§¥ÊÉÖÂÜµ‰∏∫ insideÔºàTrue ‰∏∫ÂøÖÈ°ªÊúâÔºåFalse ‰∏∫ÂèØ‰ª•ÊúâÔºâ
        Â≠êÊ†ëÂ§ñÈÉ®ÁöÑÊëÑÂÉèÂ§¥ÊÉÖÂÜµ‰∏∫ outsideÔºàÂêå‰∏äÔºâ
        ÈúÄË¶ÅÁöÑÊëÑÂÉèÂ§¥‰∏™Êï∞
    """

        @functools.lru_cache(None)
        def dfs(node: TreeNode, inside: bool, outside: bool) -> int:
            # Âè∂ËäÇÁÇπ
            if not node.left and not node.right:
                return int(inside)
            # Âè™ÊúâÂè≥Â≠©Â≠ê
            if not node.left:
                return min(
                    1 + dfs(node.right, False, True),
                    dfs(node.right, inside, outside)
                )
            # Âè™ÊúâÂ∑¶Â≠©Â≠ê
            if not node.right:
                return min(
                    1 + dfs(node.left, False, True),
                    dfs(node.left, inside, outside)
                )
            # Ê†πËäÇÁÇπ
            if node == root:
                return min(
                    1 + dfs(node.left, True, True) + dfs(node.right, False, True),
                    1 + dfs(node.left, False, True) + dfs(node.right, True, True),
                    dfs(node.left, True, False) + dfs(node.right, False, True),
                    dfs(node.left, False, True) + dfs(node.right, True, False),
                    dfs(node.left, True, True) + dfs(node.right, True, True)
                )
            # ‰∏ÄËà¨ÊÉÖÂÜµ
            if outside:
                return min(
                    dfs(node.left, True, outside) + dfs(node.right, False, True),
                    dfs(node.left, False, True) + dfs(node.right, True, outside)
                )
            else:
                return dfs(node.left, True, True) + dfs(node.right, True, True)

        return dfs(root, True, False)


# leetcode submit region end(Prohibit modification and deletion)


@pytest.mark.parametrize("kwargs,expected", [
    [dict(root=TreeNode(1,
                        left=TreeNode(2,
                                      TreeNode(3), TreeNode(4))))
        , 2],

    pytest.param(dict(root=TreeNode(1,
                                    left=TreeNode(2, TreeNode(4)),
                                    right=TreeNode(3))), 1)
])
@pytest.mark.parametrize("SolutionCLS", [
    Solution,
])
def test_solutions(kwargs, expected, SolutionCLS):
    assert SolutionCLS().navigation(**kwargs) == expected


if __name__ == '__main__':
    pytest.main(["-q", "--color=yes", "--capture=tee-sys", __file__])

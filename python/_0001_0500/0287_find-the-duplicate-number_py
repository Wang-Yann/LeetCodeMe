#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author        : Rocky Wayne 
# @Created       : 2020-04-16 22:17:36
# @Last Modified : 2020-04-16 22:17:36
# @Mail          : lostlorder@gamil.com
# @Version       : alpha-1.0


"""
# 给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出
# 这个重复的数。
#
#  示例 1:
#
#  输入: [1,3,4,2,2]
# 输出: 2
#
#
#  示例 2:
#
#  输入: [3,1,3,4,2]
# 输出: 3
#
#
#  说明：
#
#
#  不能更改原数组（假设数组是只读的）。
#  只能使用额外的 O(1) 的空间。
#  时间复杂度小于 O(n2) 。
#  数组中只有一个重复的数字，但它可能不止重复出现一次。
#
#  Related Topics 数组 双指针 二分查找
#  👍 772 👎 0

"""

from typing import List

import pytest


class Solution:

    def findDuplicate(self, nums: List[int]) -> int:
        # Treat each (key, value) pair of the array as the (pointer, next) node of the linked list,
        # thus the duplicated number will be the begin of the cycle in the linked list.
        # Besides, there is always a cycle in the linked list which
        # starts from the first element of the array.
        slow = nums[0]
        fast = nums[nums[0]]

        while slow != fast:
            slow = nums[slow]
            fast = nums[nums[fast]]
        # print(slow,fast)
        fast = 0
        while slow != fast:
            slow = nums[slow]
            fast = nums[fast]
        return slow

    def findDuplicateBin(self, nums):
        """
        """
        left, right = 1, len(nums) - 1

        while left <= right:
            mid = left + (right - left) / 2
            # Get count of num <= mid.
            count = 0
            for num in nums:
                if num <= mid:
                    count += 1
            if count > mid:
                right = mid - 1
            else:
                left = mid + 1
        return left


@pytest.mark.parametrize("args,expected", [
    ([1, 3, 4, 2, 2], 2),
    ([3, 1, 3, 4, 2], 3),
    pytest.param([3, 4, 5, 4, 2, 1], 4),
])
def test_solutions(args, expected):
    assert Solution().findDuplicate(args) == expected
    assert Solution().findDuplicateBin(args) == expected


if __name__ == '__main__':
    pytest.main(["-q", "--color=yes", "--capture=no", __file__])

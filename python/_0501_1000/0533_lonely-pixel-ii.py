#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author        : Rock Wayne 
# @Created       : 2020-07-29 17:44:41
# @Last Modified : 2020-07-29 17:44:41
# @Mail          : lostlorder@gmail.com
# @Version       : alpha-1.0

"""
# ÁªôÂÆö‰∏ÄÂπÖÁî±ÈªëËâ≤ÂÉèÁ¥†ÂíåÁôΩËâ≤ÂÉèÁ¥†ÁªÑÊàêÁöÑÂõæÂÉèÔºå ‰∏é‰∏Ä‰∏™Ê≠£Êï¥Êï∞N, ÊâæÂà∞‰Ωç‰∫éÊüêË°å R ÂíåÊüêÂàó C ‰∏≠‰∏îÁ¨¶Âêà‰∏ãÂàóËßÑÂàôÁöÑÈªëËâ≤ÂÉèÁ¥†ÁöÑÊï∞Èáè: 
# 
#  
#  Ë°åR ÂíåÂàóCÈÉΩÊÅ∞Â•ΩÂåÖÊã¨N‰∏™ÈªëËâ≤ÂÉèÁ¥†„ÄÇ 
#  ÂàóC‰∏≠ÊâÄÊúâÈªëËâ≤ÂÉèÁ¥†ÊâÄÂú®ÁöÑË°åÂøÖÈ°ªÂíåË°åRÂÆåÂÖ®Áõ∏Âêå„ÄÇ 
#  
# 
#  ÂõæÂÉèÁî±‰∏Ä‰∏™Áî±‚ÄòB‚ÄôÂíå‚ÄòW‚ÄôÁªÑÊàê‰∫åÁª¥Â≠óÁ¨¶Êï∞ÁªÑË°®Á§∫, ‚ÄòB‚ÄôÂíå‚ÄòW‚ÄôÂàÜÂà´‰ª£Ë°®ÈªëËâ≤ÂÉèÁ¥†ÂíåÁôΩËâ≤ÂÉèÁ¥†„ÄÇ 
# 
#  Á§∫‰æã: 
# 
#  ËæìÂÖ•:                                            
# [['W', 'B', 'W', 'B', 'B', 'W'],    
#  ['W', 'B', 'W', 'B', 'B', 'W'],    
#  ['W', 'B', 'W', 'B', 'B', 'W'],    
#  ['W', 'W', 'B', 'W', 'B', 'W']] 
# 
# N = 3
# ËæìÂá∫: 6
# Ëß£Êûê: ÊâÄÊúâÁ≤ó‰ΩìÁöÑ'B'ÈÉΩÊòØÊàë‰ª¨ÊâÄÊ±ÇÁöÑÂÉèÁ¥†(Á¨¨1ÂàóÂíåÁ¨¨3ÂàóÁöÑÊâÄÊúâ'B').
#         0    1    2    3    4    5         ÂàóÂè∑                                 
#          
# 0    [['W', 'B', 'W', 'B', 'B', 'W'],    
# 1     ['W', 'B', 'W', 'B', 'B', 'W'],    
# 2     ['W', 'B', 'W', 'B', 'B', 'W'],    
# 3     ['W', 'W', 'B', 'W', 'B', 'W']]    
# Ë°åÂè∑
# 
# ‰ª•R = 0Ë°åÂíåC = 1ÂàóÁöÑ'B'‰∏∫‰æã:
# ËßÑÂàô 1ÔºåR = 0Ë°åÂíåC = 1ÂàóÈÉΩÊÅ∞Â•ΩÊúâN = 3‰∏™ÈªëËâ≤ÂÉèÁ¥†. 
# ËßÑÂàô 2ÔºåÂú®C = 1ÂàóÁöÑÈªëËâ≤ÂÉèÁ¥†ÂàÜÂà´‰Ωç‰∫é0Ôºå1Âíå2Ë°å„ÄÇÂÆÉ‰ª¨ÈÉΩÂíåR = 0Ë°åÂÆåÂÖ®Áõ∏Âêå„ÄÇ
# 
#  
# 
#  
# 
#  Ê≥®ÊÑè: 
# 
#  
#  ËæìÂÖ•‰∫åÁª¥Êï∞ÁªÑË°åÂíåÂàóÁöÑËåÉÂõ¥ÊòØ [1,200]„ÄÇ 
#  
# 
#  
#  Related Topics Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ Êï∞ÁªÑ 
#  üëç 8 üëé 0

"""

import collections
from typing import List

import pytest


# leetcode submit region begin(Prohibit modification and deletion)
class Solution:
    def findBlackPixel(self, picture: List[List[str]], N: int) -> int:
        """È¢òÊÑèÂ§™Ë¥πËß£"""
        R, C = len(picture), len(picture[0])
        rows, cols = [0] * R, [0] * C
        lookup = collections.defaultdict(int)
        for i in range(R):
            for j in range(C):
                if picture[i][j] == 'B':
                    rows[i] += 1
                    cols[j] += 1
            lookup[tuple(picture[i])] += 1
        # print(rows,cols,lookup)
        result = 0
        for i in range(R):
            if rows[i] == N and lookup[tuple(picture[i])] == N:
                for j in range(C):
                    result += picture[i][j] == 'B' and cols[j] == N
        return result


# leetcode submit region end(Prohibit modification and deletion)


@pytest.mark.parametrize("kw,expected", [
    [dict(
        picture=[['W', 'B', 'W', 'B', 'B', 'W'],
                 ['W', 'B', 'W', 'B', 'B', 'W'],
                 ['W', 'B', 'W', 'B', 'B', 'W'],
                 ['W', 'W', 'B', 'W', 'B', 'W']],
        N=3
    ), 6],

])
def test_solutions(kw, expected):
    assert Solution().findBlackPixel(**kw) == expected


if __name__ == '__main__':
    pytest.main(["-q", "--color=yes", "--capture=no", __file__])

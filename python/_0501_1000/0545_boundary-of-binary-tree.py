#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author        : Rock Wayne 
# @Created       : 2020-07-29 18:14:52
# @Last Modified : 2020-07-29 18:14:52
# @Mail          : lostlorder@gmail.com
# @Version       : alpha-1.0

# ÁªôÂÆö‰∏ÄÊ£µ‰∫åÂèâÊ†ëÔºå‰ª•ÈÄÜÊó∂ÈíàÈ°∫Â∫è‰ªéÊ†πÂºÄÂßãËøîÂõûÂÖ∂ËæπÁïå„ÄÇËæπÁïåÊåâÈ°∫Â∫èÂåÖÊã¨Â∑¶ËæπÁïå„ÄÅÂè∂Â≠êÁªìÁÇπÂíåÂè≥ËæπÁïåËÄå‰∏çÂåÖÊã¨ÈáçÂ§çÁöÑÁªìÁÇπ„ÄÇ (ÁªìÁÇπÁöÑÂÄºÂèØËÉΩÈáçÂ§ç)
# 
#  Â∑¶ËæπÁïåÁöÑÂÆö‰πâÊòØ‰ªéÊ†πÂà∞ÊúÄÂ∑¶‰æßÁªìÁÇπÁöÑË∑ØÂæÑ„ÄÇÂè≥ËæπÁïåÁöÑÂÆö‰πâÊòØ‰ªéÊ†πÂà∞ÊúÄÂè≥‰æßÁªìÁÇπÁöÑË∑ØÂæÑ„ÄÇËã•Ê†πÊ≤°ÊúâÂ∑¶Â≠êÊ†ëÊàñÂè≥Â≠êÊ†ëÔºåÂàôÊ†πËá™Ë∫´Â∞±ÊòØÂ∑¶ËæπÁïåÊàñÂè≥ËæπÁïå„ÄÇÊ≥®ÊÑèËØ•ÂÆö‰πâÂè™ÂØπËæìÂÖ•ÁöÑ‰∫åÂèâÊ†ë
# ÊúâÊïàÔºåËÄåÂØπÂ≠êÊ†ëÊó†Êïà„ÄÇ 
# 
#  ÊúÄÂ∑¶‰æßÁªìÁÇπÁöÑÂÆö‰πâÊòØÔºöÂú®Â∑¶Â≠êÊ†ëÂ≠òÂú®Êó∂ÊÄªÊòØ‰ºòÂÖàËÆøÈóÆÔºåÂ¶ÇÊûú‰∏çÂ≠òÂú®Â∑¶Â≠êÊ†ëÂàôËÆøÈóÆÂè≥Â≠êÊ†ë„ÄÇÈáçÂ§ç‰ª•‰∏äÊìç‰ΩúÔºåÈ¶ñÂÖàÊäµËææÁöÑÁªìÁÇπÂ∞±ÊòØÊúÄÂ∑¶‰æßÁªìÁÇπ„ÄÇ 
# 
#  ÊúÄÂè≥‰æßÁªìÁÇπÁöÑÂÆö‰πâÊñπÂºèÁõ∏ÂêåÔºåÂè™ÊòØÂ∞ÜÂ∑¶ÊõøÊç¢ÊàêÂè≥„ÄÇ 
# 
#  Á§∫‰æã 1 
# 
#  ËæìÂÖ•:
#   1
#    \
#     2
#    / \
#   3   4
# 
# ËæìÂá∫:
# [1, 3, 4, 2]
# 
# Ëß£Êûê:
# Ê†π‰∏çÂ≠òÂú®Â∑¶Â≠êÊ†ëÔºåÊïÖÊ†πËá™Ë∫´Âç≥‰∏∫Â∑¶ËæπÁïå„ÄÇ
# Âè∂Â≠êÁªìÁÇπÊòØ3Âíå4„ÄÇ
# Âè≥ËæπÁïåÊòØ1Ôºå2Ôºå4„ÄÇÊ≥®ÊÑèÈÄÜÊó∂ÈíàÈ°∫Â∫èËæìÂá∫ÈúÄË¶Å‰Ω†ËæìÂá∫Êó∂Ë∞ÉÊï¥Âè≥ËæπÁïåÈ°∫Â∫è„ÄÇ
# ‰ª•ÈÄÜÊó∂ÈíàÈ°∫Â∫èÊó†ÈáçÂ§çÂú∞ÊéíÂàóËæπÁïåÔºåÂæóÂà∞Á≠îÊ°à[1,3,4,2]„ÄÇ
#  
# 
#  
# 
#  Á§∫‰æã 2 
# 
#  ËæìÂÖ•:
#     ____1_____
#    /          \
#   2            3
#  / \          / 
# 4   5        6   
#    / \      / \
#   7   8    9  10  
#        
# ËæìÂá∫:
# [1,2,4,7,8,9,10,6,3]
# 
# Ëß£Êûê:
# Â∑¶ËæπÁïåÊòØÁªìÁÇπ1,2,4„ÄÇ(Ê†πÊçÆÂÆö‰πâÔºå4ÊòØÊúÄÂ∑¶‰æßÁªìÁÇπ)
# Âè∂Â≠êÁªìÁÇπÊòØÁªìÁÇπ4,7,8,9,10„ÄÇ
# Âè≥ËæπÁïåÊòØÁªìÁÇπ1,3,6,10„ÄÇ(10ÊòØÊúÄÂè≥‰æßÁªìÁÇπ)
# ‰ª•ÈÄÜÊó∂ÈíàÈ°∫Â∫èÊó†ÈáçÂ§çÂú∞ÊéíÂàóËæπÁïåÔºåÂæóÂà∞Á≠îÊ°à [1,2,4,7,8,9,10,6,3]„ÄÇ
#  
# 
#  
#  Related Topics Ê†ë 
#  üëç 25 üëé 0


from typing import List

import pytest

from common_utils import TreeNode


# leetcode submit region begin(Prohibit modification and deletion)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def boundaryOfBinaryTree(self, root: TreeNode) -> List[int]:
        if root is None:
            return []
        if not root.left and not root.right:
            return [root.val]

        left_boundary = self.find_left_boundary(root.left)
        leaves = self.find_leaves(root)
        right_boundary = self.find_right_boundary(root.right)

        if left_boundary and leaves and left_boundary[-1] == leaves[0]:
            leaves = leaves[1:]
        if leaves and right_boundary and leaves[-1] == right_boundary[-1]:
            leaves = leaves[:-1]
        return [root.val] + left_boundary + leaves + list(reversed(right_boundary))

    def leaves(self, root, nodes):
        """Âêå‰∏ãÊñπ"""

        if not root:
            return
        if not root.left and not root.right:
            nodes.append(root.val)
            return
        self.leaves(root.left, nodes)
        self.leaves(root.right, nodes)

    def find_leaves(self, root):
        stack = [root]
        leaves = []
        while stack:
            node = stack.pop()
            if not node.left and not node.right:
                leaves.append(node.val)
            if node.right:
                stack.append(node.right)
            if node.left:
                stack.append(node.left)
        return leaves

    def find_left_boundary(self, root):
        left_boundary = []
        while root is not None:
            left_boundary.append(root.val)
            if root.left:
                root = root.left
            elif root.right:
                root = root.right
            else:
                break
        return left_boundary

    def find_right_boundary(self, root):
        right_boundary = []
        while root is not None:
            right_boundary.append(root.val)
            if root.right:
                root = root.right
            elif root.left:
                root = root.left
            else:
                break
        return right_boundary


# leetcode submit region end(Prohibit modification and deletion)

@pytest.mark.parametrize("kw,expected", [
    [dict(root=TreeNode(
        1,
        right=TreeNode(2, TreeNode(3), TreeNode(4)))), [1, 3, 4, 2]],
    [dict(root=TreeNode(
        1,
        left=TreeNode(2, left=TreeNode(4), right=TreeNode(5, TreeNode(7), TreeNode(8))),
        right=TreeNode(3, left=TreeNode(6, TreeNode(9), TreeNode(10)))
    )), [1, 2, 4, 7, 8, 9, 10, 6, 3]],
    [dict(root=TreeNode(1)), [1]],
])
def test_solutions(kw, expected):
    assert Solution().boundaryOfBinaryTree(**kw) == expected


if __name__ == '__main__':
    pytest.main(["-q", "--color=yes", "--capture=no", __file__])
